---
volumes:
  grafana_data:
  loki_data:
  prometheus_data:

networks:
  default:
    driver: bridge

services:

  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=360d"
    ports:
      - 9090:9090
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 10s
      retries: 6

  loki:
    image: grafana/loki:3.5.5
    container_name: loki
    restart: unless-stopped
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yml
    ports:
      - 3100:3100
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 10s
      retries: 6

  grafana:
    image: grafana/grafana:12.1.1
    container_name: grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      # Auth
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      # Metrics
      - GF_METRICS_ENABLED=true
      - GF_METRICS_BASIC_AUTH_USERNAME=admin
      - GF_METRICS_BASIC_AUTH_PASSWORD=admin
      # Enable alerting state history
      - GF_UNIFIED_ALERTING_STATE_HISTORY_ENABLED=true
      - GF_UNIFIED_ALERTING_STATE_HISTORY_BACKEND=loki
      - GF_UNIFIED_ALERTING_STATE_HISTORY_LOKI_REMOTE_URL=http://loki:3100
      # Misc
      - GF_FEATURE_TOGGLES_ENABLE=grafanaManagedRecordingRules
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      # - ./config/grafana/entrypoint.sh:/entrypoint.sh
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    # entrypoint: ["/bin/bash", "/entrypoint.sh"]
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 6

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.27.0
    container_name: blackbox-exporter
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./config/prometheus/blackbox-exporter.yml:/etc/prometheus/blackbox-exporter.yml:ro
    command:
      - "--config.file=/etc/prometheus/blackbox-exporter.yml"
    ports:
      - 9115:9115
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9115"]
      interval: 10s
      timeout: 10s
      retries: 6

  ## Run compose in profile `dev` to start this service. It is used to ship logs
  ## to loki and to test Grafana Alloy in development. Alloy is not scraped by
  ## Prometheus but sends metrics to Prometheus by itself. So without an Alloy
  ## instance running, no logs will be shipped to Loki when testing on locally.
  dev-alloy:
    image: grafana/alloy:v1.10.2
    container_name: dev-alloy
    profiles:
      - dev
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_healthy
    environment:
      # additional data which should be available in config.alloy
      - HOSTNAME=${HOSTNAME}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./config/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 2345:12345
      - 4317:4317
      - 4318:4318
    networks:
      - default
    extra_hosts:
      - "host.docker.internal:host-gateway"

  test-inspec:
    image: chef/inspec:5.22.76
    container_name: test-inspec
    profiles:
      - test
    depends_on:
      prometheus:
        condition: service_healthy
      blackbox-exporter:
        condition: service_healthy
      grafana:
        condition: service_healthy
      loki:
        condition: service_healthy
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./tests:/tests
    working_dir: /tests
    command: exec inspec/baseline --no-distinct-exit --chef-license=accept
    networks:
      - default
    extra_hosts:
      - "host.docker.internal:host-gateway"
